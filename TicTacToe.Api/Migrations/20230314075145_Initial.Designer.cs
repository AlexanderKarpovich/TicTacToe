// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToe.Api.Data;

#nullable disable

namespace TicTacToe.Api.Migrations
{
    [DbContext(typeof(GamesDbContext))]
    [Migration("20230314075145_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TicTacToe.Api.Models.GameCell", b =>
                {
                    b.Property<int>("GameSessionId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Variant")
                        .HasColumnType("int");

                    b.HasKey("GameSessionId", "Position");

                    b.ToTable("GameCells", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Api.Models.GameSession", b =>
                {
                    b.Property<int>("GameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameSessionId"), 1L, 1);

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<int?>("Player1PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Player2PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerTurnPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int");

                    b.HasKey("GameSessionId");

                    b.HasIndex("Player1PlayerId");

                    b.HasIndex("Player2PlayerId");

                    b.HasIndex("PlayerTurnPlayerId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Api.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Variant")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Api.Models.GameCell", b =>
                {
                    b.HasOne("TicTacToe.Api.Models.GameSession", null)
                        .WithMany("Cells")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicTacToe.Api.Models.GameSession", b =>
                {
                    b.HasOne("TicTacToe.Api.Models.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1PlayerId");

                    b.HasOne("TicTacToe.Api.Models.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2PlayerId");

                    b.HasOne("TicTacToe.Api.Models.Player", "PlayerTurn")
                        .WithMany()
                        .HasForeignKey("PlayerTurnPlayerId");

                    b.HasOne("TicTacToe.Api.Models.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerPlayerId");

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("PlayerTurn");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TicTacToe.Api.Models.GameSession", b =>
                {
                    b.Navigation("Cells");
                });
#pragma warning restore 612, 618
        }
    }
}
